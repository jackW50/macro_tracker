<%= content_tag :h1, "Meal for #{meal_time(@meal)}" %>

<%= errors_list(@meal) %>

  <div>
    <%= button_tag "See Foods", type: 'button', class: "see-foods", id: "see-foods", data: "#{@meal.id}" %>
  </div>

  <h3 id="title"></h3>
  <%= content_tag :ul, nil, class: "col-1", id: "foods" %>

<div class="col-2">
  <h5 id="meal_show_macro"> Macronutrient Tracker </h5>
  <table class="pure-table">
      <thead>
          <tr>
              <th>Category</th>
              <th>Grams</th>
              <th>Percentage of Calories</th>
          </tr>
      </thead>
      <tbody>
        <%= render 'macronutrients_table', macronutrients: @macronutrients, item: @meal %>
      </tbody>
  </table>
</div>

  <!-- dropdown menu to add existing foods to current meal -->
  <div id="form" class="col-2"></div>
  <%= form_tag(meal_path(@meal), method: :patch, id: "add-food-form", data: @meal.id) do %>
    <%= meal_errors_present?(@meal) do %>
      <%= select_tag 'meal[add_food][food_id]', options_from_collection_for_select(Food.all, :id, :name), prompt: "Select Food"  %>
      <%= text_field_tag 'meal[add_food][servings]', nil, placeholder: 'servings' %>
      <%= submit_tag "Add Food" %>
    <% end %>
  <% end %>

<h4 id="create-title" class="col-2"><h4>
  <%= content_tag :p, id: "add-form" do %>
    <%= link_to "Create Food", new_meal_food_path(@meal), id: "new-food-link", data: "#{@meal.id}" %>
  <% end %>

<!-- link to edit meals time -->
<div>
  <%= content_tag :div, class: "col-2" do %>
   <%= link_to "Update Meal Time", edit_meal_path(@meal) %>
  <% end %>
</div>

  <script type="text/javascript" charset="utf-8">
    console.log('hello on show');
    //This function adds a listener to the remove button in the foods list
    function removeFoodListener() {
      $('button#remove-food').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('In the remove food function', this);

        let mealCompositionId = this.attributes.data.value;
        let mealId = $('body').data('meal-foods').id
        //removing the parent li this button is under from the DOM.
        $(this).closest('ul').closest('li').remove();

        $.ajax({
          type: "PATCH",
          url: "/meals/" + mealId,
          data: { meal: { remove_food: mealCompositionId } },
          success: success,
          dataType: 'json'
        });

        function success(data) {
          console.log('We have data back from updating removing the food', data);
          //take the data and create a new table
          macronutrientTable = new MacronutrientTable(data.table_data.carbohydrate, data.table_data.percent_calories_of_carbohydrate,
          data.table_data.protein,data.table_data.percent_calories_of_protein, data.table_data.fat, data.table_data.percent_calories_of_fat)
          //update the table on the DOM
          macronutrientTable.updateTable();
        }
      })
    }
    function resetSubmit() {
      $('#add-food-form input[type="submit"]').prop('disabled', false);
    }

    $(document).on('turbolinks:load', function() {
      $('#see-foods').off();
      $('#new-food-link').off();
      $('#add-food-form').off("submit");

      console.log('turbolinks loads');
      //See Foods button listener
      $('#see-foods').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        $('#see-foods').off();
        console.log('You just clicked the button');
        //identifying which meal it is through the data attribute on the button which contains the meal id.
        const mealId = this.attributes.data.value;
        $.getJSON('/meals/' + mealId, function(data) {
          console.log('in the get response');
          //create a meal object with the json response
          let meal = new Meal(data.id, data.time, data.meal_compositions);
          $("body").data( "meal-foods", meal);
          $('#title').text('Foods');
          //Adding each meal composition to the DOM
          meal.foodList().forEach( element => {
            console.log('we are in the iteration');
            $('#foods').append(element);
          })
          //Once the foods are displayed, this attaches a listener for the remove button for each list item.
          removeFoodListener();
        })
      })
      //Attach listener for the new food link
      $('#new-food-link').on('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('just clicked to create a new food for meal.');
        $('#create-title').text("Create Foods");
        if ($('body').data('new-form') === undefined) {
          let id = $('#new-food-link')[0].attributes.data.value
          //id is the current meals id that gets passed into the template.
          let newFoodForm = HandlebarsTemplates['new_food_form']({
            mealId: id
          })
          //Adds to the DOM a new food form for the meal.
          $('#add-form').prepend(newFoodForm);
          $('body').data('new-form', newFoodForm);
          //adds a hide form link to form.
          $('#hide-form').prepend('<a id="hide-form-link" href="#">hide form</a>')
          $('#new-food-link').hide();
        } else {
          console.log('In the else statement');
          $('#add-form').prepend($('body').data('new-form'))
          //display none for the new food link, and saving theis display property in jQuery data cache
          $('#new-food-link').hide();
          $('#hide-form').prepend('<a id="hide-form-link" href="#">hide form</a>')
        }
        //Once the form displays, attach a hide listener for the hide form link now dispayed on DOM.
        $('#hide-form').on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          //Remove form from DOM, but retains jQuery data associated
          $('#new-food-form').detach();
          $('#create-title').text("");
          //Callling on the jQuery data cache to restore new-food-link initial display.
          $('#new-food-link').show();
        })
        //attaching a listener on the new food form
        $('#new-food-form').on('submit', function(e) {
          e.preventDefault();
          e.stopPropagation();
          //Callling on the jQuery data cache to restore new-food-link initial display.
          $('#new-food-link').show();
          let mealId = $('#new-food-form')[0].attributes.data.value;
          //creates a text string in standard URL-encoded notation
          let values = $(this).serialize();

          $.ajax({
            type: "POST",
            url: "/meals/" + mealId + '/foods',
            data: values,
            success: success,
            dataType: 'json'
          });

          function success(data) {
            //When POST req is successful, create a food object and mealComposition object from json response data.
            let food = new Food(data.food.id, data.food.name);
            let mealComposition = new MealComposition(data.meal_composition.id,
            data.meal_composition.food_id, data.meal_composition.food_servings, data.meal_composition.meal_id)
            //checking to see if the foods list is displayed. When foods list is displayed meal-foods will have a value other than undefined attached to body.
            if ($('body').data('meal-foods') === undefined) {
              //Dont show on DOM
              alert('You just created a food for this meal')
            } else {
              //the add food to list function takes a meal composition object as an argument, and adds it the end of the list of foods
              $('#foods').append(food.addFoodToList(mealComposition));
              const $arrList = $('#foods li button')
              //Grabs the last remove button and attach a listener to this button.
              $arrList.last().on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('In the remove food function', this);

                let mealCompositionId = this.attributes.data.value;
                let mealId = $('body').data('meal-foods').id
                $(this).closest('ul').closest('li').remove();

                $.ajax({
                  type: "PATCH",
                  url: "/meals/" + mealId,
                  data: { meal: { remove_food: mealCompositionId } },
                  success: success,
                  dataType: 'json'
                });

                function success(data) {
                  console.log('We have data back from updating removing the food', data);
                  //take the data and create a new table
                  const macronutrientTable = new MacronutrientTable(data.table_data.carbohydrate, data.table_data.percent_calories_of_carbohydrate,
                  data.table_data.protein,data.table_data.percent_calories_of_protein, data.table_data.fat, data.table_data.percent_calories_of_fat)
                  //update the table on the DOM
                  macronutrientTable.updateTable();
                }
              })
            }
            const macronutrientTable = new MacronutrientTable(data.table_data.carbohydrate, data.table_data.percent_calories_of_carbohydrate,
            data.table_data.protein,data.table_data.percent_calories_of_protein, data.table_data.fat, data.table_data.percent_calories_of_fat)

            macronutrientTable.updateTable();
            $('#new-food-form').remove();
            $('#create-title').text("");
          }
        })
      })
      //attach a listener to the add food form.
      $('#add-food-form').submit(function(e) {
        e.preventDefault();
        e.stopPropagation();

        console.log('I submitted the add food form', this);
        //creates a text string in standard URL-encoded notation(query string)
        let values = $(this).serialize();
        let mealId = $(this)[0].attributes.data.value;
        $.ajax({
          type: "PATCH",
          url: "/meals/" + mealId,
          data: values,
          success: success,
          dataType: 'json'
        });

        function success(data) {

          console.log('the add food form was successful', data);

          let food = new Food(data.food.id, data.food.name);
          let mealComposition = new MealComposition(data.meal_composition.id,
          data.meal_composition.food_id, data.meal_composition.food_servings, data.meal_composition.meal_id)

          if ($('body').data('meal-foods') === undefined) {
            alert('You just added a food for this meal')
          } else {
            //the add food to list function takes a meal composition object as an argument
            $('#foods').append(food.addFoodToList(mealComposition));
            const $arrList = $('#foods li button')
            $arrList.last().on('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              console.log('In the remove food function', this);

              let mealCompositionId = this.attributes.data.value;
              let mealId = $('body').data('meal-foods').id
              $(this).closest('ul').closest('li').remove();

              $.ajax({
                type: "PATCH",
                url: "/meals/" + mealId,
                data: { meal: { remove_food: mealCompositionId } },
                success: success,
                dataType: 'json'
              });

              function success(data) {
                console.log('We have data back from updating removing the food', data);
                //take the data and create a new table
                macronutrientTable = new MacronutrientTable(data.table_data.carbohydrate, data.table_data.percent_calories_of_carbohydrate,
                data.table_data.protein,data.table_data.percent_calories_of_protein, data.table_data.fat, data.table_data.percent_calories_of_fat)
                //update the table on the DOM
                macronutrientTable.updateTable();
              }
            })
          }
          macronutrientTable = new MacronutrientTable(data.table_data.carbohydrate, data.table_data.percent_calories_of_carbohydrate,
          data.table_data.protein,data.table_data.percent_calories_of_protein, data.table_data.fat, data.table_data.percent_calories_of_fat)

          macronutrientTable.updateTable();
          //reset form
          $('#add-food-form').trigger('reset');
          //re-enable button
          resetSubmit();
        }
      })
    });

  </script>
